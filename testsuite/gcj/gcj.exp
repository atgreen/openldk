load_lib dg.exp
load_lib openldk.exp

dg-init

set dg-do-what-default run

set testargs ""
set testname ""
set expected_output ""

proc openldk_load { classfile } {

    global testargs
    set timeout 40
    verbose "load $classfile"
    set ldkcp [getenv "LDK_CLASSPATH"]
    setenv "LDK_CLASSPATH" "$ldkcp:./gcj"
    set classname [string map {".class" ""} $classfile]
    set classname [string trimleft $classname "gcj/"]
    set result [local_exec "../openldk $classname $testargs" "" "" $timeout]
    verbose "result = $result"
    set status [lindex $result 0]
    set run_output [lindex $result 1]
    verbose "STATUS = $status"

    if { $status != 0 } {
        if {[is_expected_failure $classname]} {
            return [list "xfail" $run_output]
        } else {
            return [list "fail" $run_output]
        }
    }

    # Normalize line endings and remove trailing whitespace from the output
    regsub -all {\r} $run_output "" run_output
    set run_output_lines [split $run_output "\n"]
    set run_output_cleaned ""
    foreach line $run_output_lines {
        regsub {[\s\t]+$} $line "" line ;# Remove trailing spaces and tabs
        append run_output_cleaned "$line\n"
    }

    # Remove trailing newlines from the cleaned output
    regsub {\n+$} $run_output_cleaned "" run_output_cleaned

    set expected_output [string map {".class" ".out"} $classfile]

    if { [file exists $expected_output] == 1} {

        # Read and normalize the expected output
        set expected [exec cat $expected_output]
        regsub -all {\r} $expected "" expected
        set expected_lines [split $expected "\n"]
        set expected_cleaned ""
        foreach line $expected_lines {
            regsub {[\s\t]+$} $line "" line ;# Remove trailing spaces and tabs
            append expected_cleaned "$line\n"
        }

        # Remove trailing newlines from the cleaned expected output
        regsub {\n+$} $expected_cleaned "" expected_cleaned

        if {[catch {exec grep -q -- "$test_name" $expected_failures_file} result options]} {
            set expected_failure 0
        } else {
            set expected_failure 1
        }

        # Compare the cleaned output with the cleaned expected output
        if { $run_output_cleaned == $expected_cleaned } {
            if { $expected_failure == 0 } {
                return [list "pass" "Output matches expected"]
            } else {
                return [list "xpass" "Output matches expected"]
            }
        } else {
            if { {expected_failure} == 0 } {
                return [list "fail" "Output does not match expected"]
            } else {
                return [list "xfail" "Output does not match expected"]
            }
        }
    } else {
        if {[is_expected_failure $classname]} {
            return [list "xpass" $run_output]
        } else {
            return [list "pass" $run_output]
        }
    }
}

proc openldk-dg-test { prog do_what extra_tool_flags } {

    global testargs
    set timeout 5

    verbose "prog $prog" 2
    verbose "do_what $do_what" 2
    verbose "extra_tool_flags $extra_tool_flags" 2

    # Run the javac command
    local_exec "rm -f *.class" "" "" $timeout
    set JAVA_HOME [getenv "JAVA_HOME"]
    set status [local_exec "$JAVA_HOME/../bin/javac $prog" "" "" $timeout]

    # Extract the compiler output from the status list
    set output [lindex $status 1]

    set classname [string map {".java" ""} $prog]
    set testargs "1 2 3 4 5"

    return [list "" "$classname.class"]
}



set tlist [lsort [glob -nocomplain -- gcj/*.java]]

foreach test $tlist {

 		verbose "Testing $test"
    set testname "$test"
		dg-test $test "" ""

}

dg-finish
