load_lib dg.exp

dg-init

set dg-do-what-default run

set testargs ""

proc openldk_load { classfile } {

    global testargs
    set timeout 20
    verbose "load $classfile"
    set ldkcp [getenv "LDK_CLASSPATH"]
    setenv "LDK_CLASSPATH" "$ldkcp:.:./gcj"
    set classname [string map {".class" ""} $classfile]
    set classname [string trimleft $classname "gcj/"]
    set result [local_exec "../openldk $classname $testargs" "" "" $timeout]
    verbose "result = $result"
    set status [lindex $result 0]
    set output [lindex $result 1]
    verbose "STATUS = $status"
    if { $status == 0 } {
        verbose "PASS"
        return [list "pass" $output]
    } else {
        verbose "FAIL"
        return [list "fail" $output]
    }
}

proc openldk-dg-test { prog do_what extra_tool_flags } {

    global testargs
    set timeout 5

    verbose "prog $prog" 2
    verbose "do_what $do_what" 2
    verbose "extra_tool_flags $extra_tool_flags" 2

    # Run the javac command
    set status [local_exec "javac -nowarn $prog" "" "" $timeout]

    # Extract the compiler output from the status list
    set output [lindex $status 1]

    # Filter out lines that start with "Note:"
    set filtered_output ""
    foreach line [split $output "\n"] {
        if {![regexp {^Note:} $line]} {
            append filtered_output "$line\n"
        }
    }

    # Reconstruct the status with the filtered output
    set classname [string map {".java" ""} $prog]
    set testargs "1 2 3 4 5"

    return [list $filtered_output "$classname.class"]
}



set tlist [lsort [glob -nocomplain -- gcj/*.java]]

foreach test $tlist {

 		verbose "Testing $test"
		dg-test $test "" ""

}

dg-finish
