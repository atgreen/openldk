###############################################################################
# Copyright (c) 2000, 2003 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials 
# are made available under the terms of the Common Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/cpl-v10.html
# 
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
### Runtime plugin message catalog

ok = OK

### plugins
plugin.extDefNotFound = Executable extension definition for \"{0}\" not found.
plugin.extDefNoClass = Executable extension definition \"{0}\" does not specify a class name.
plugin.deactivatedLoad = Attempt to load class \"{0}\" from deactivated plug-in \"{1}\".
plugin.loadClassError = Plug-in {0} was unable to load class {1}.
plugin.instantiateClassError = Plug-in \"{0}\" was unable to instantiate class \"{1}\".
plugin.initObjectError = Plug-in \"{0}\" was unable to execute setInitializationData on an instance of \"{1}\".
plugin.bundleNotFound = Plug-in \"{0}\" could not find resource bundle \"{1}\".
plugin.notPluginClass = Supplied runtime class \"{0}\" does not extend class Plugin.
plugin.startupProblems = Problems encountered starting up plug-in: \"{0}\".
plugin.pluginDisabled = Attempt to activate a disabled plug-in: \"{0}\".
plugin.unableToResolve = Unable to resolve plug-in registry.
plugin.mismatchRuntime = Runtime class declaration mismatch for plug-in: \"{0}\".
plugin.delegatingLoaderTrouble = "Plug-in \"{0}\" activation failed while loading class \"{1}\".

### parsing/resolve
parse.error = Parsing error: \"{0}\".
parse.errorProcessing = Error while processing \"{0}\".
parse.errorNameLineColumn = Parsing error in \"{0}\" [line {1}, column {2}]: \"{3}\".
parse.extPointUnknown = Unknown extension point \"{0}\" specified in plug-in \"{1}\".
parse.extPointDisabled = Extension point \"{0}\" specified in plug-in \"{1}\" is disabled.
parse.prereqDisabled = Plug-in \"{0}\" was disabled due to missing or disabled prerequisite plug-in \"{1}\".
parse.unsatisfiedPrereq = Unable to satisfy prerequisite constraint from \"{0}\" to \"{1}\".
parse.prereqLoop = Detected prerequisite loop from \"{0}\" to \"{1}\".
parse.registryProblems = Problems encountered loading the plug-in registry.
parse.fragmentMissingAttr = Fragment \"{0}\" ignored due to missing attributes.
parse.fragmentMissingIdName = Fragment ignored due to missing attributes (including name and id).
parse.pluginMissingAttr = Plug-in \"{0}\" disabled due to missing attributes.
parse.pluginMissingIdName = Plug-in disabled due to missing attributes (including name and id).
parse.unknownElement = Unknown element \"{1}\", found within a \"{0}\", ignored.
parse.unknownTopElement = Unknown element \"{0}\", found at the top level, ignored.
parse.initializationTrouble = Parser initialization using setFeature failed.
parse.internalStack = Element/end element mismatch for element \"{0}\".
parse.validMatch = \"{0}\" is not a valid value for the attribute \"match\".   Use \"perfect\", \"equivalent\", \"compatible\" or \"greaterOrEqual\".
parse.validExport = \"{0}\" is not a valid value for the attribute \"export\".   Use \"true\" or \"false\".
parse.unknownAttribute = Unknown attribute \"{1}\" for element \"{0}\" ignored.
parse.missingFragmentPd = Plug-in descriptor \"{0}\" not found for fragment \"{1}\".  Fragment ignored.
parse.unsatisfiedOptPrereq = Optional prerequisite constraint from \"{0}\" to\" {1}\" ignored.
parse.prereqOptLoop = Optional prerequisite from \"{0}\" to \"{1}\" produced loop.  Prerequisite ignored.
parse.unknownLibraryType = Unknown library type \"{0}\" for library \"{1}\".
parse.duplicatePlugin= Two plug-ins found with the same id: \"{0}\". Ignoring duplicate at \"{1}\".
parse.unknownEntry=Unknown element parsed by plug-in registry: \"{0}\".
parse.nullPluginIdentifier=Plug-in not loaded due to missing id or version number: \"{0}\".
parse.nullFragmentIdentifier=Fragment not loaded due to missing id or version number: \"{0}\".
parse.missingPluginName=Name attribute missing from plug-in or fragment at \"{0}\".
parse.missingPluginId=Id attribute missing from plug-in or fragment at \"{0}\".
parse.missingPluginVersion=Version attribute missing from plug-in or fragment at \"{0}\".
parse.missingFPName=Plug-in name attribute missing from fragment at \"{0}\".
parse.missingFPVersion=Plug-in version attribute missing from fragment at \"{0}\".
parse.postiveMajor=Plug-in version identifier, \"{0}\", must have a positive major (1st) component.
parse.postiveMinor=Plug-in version identifier, \"{0}\", must have a positive minor (2nd) component.
parse.postiveService=Plug-in version identifier, \"{0}\", must have a positive service (3rd) component.
parse.emptyPluginVersion=A plug-in version identifier must be non-empty.
parse.separatorStartVersion=Plug-in version identifier, \"{0}\", must not start with a separator character.
parse.separatorEndVersion=Plug-in version identifier, \"{0}\", must not end with a separator character.
parse.doubleSeparatorVersion=Plug-in version identifier, \"{0}\", must not contain two consecutive separator characters.
parse.oneElementPluginVersion=Plug-in version identifier, \"{0}\", must contain at least one component.
parse.fourElementPluginVersion=Plug-in version identifier, \"{0}\", can contain a maximum of four components.
parse.numericMajorComponent=The major (1st) component of plug-in version identifier, \"{0}\", must be numeric.
parse.numericMinorComponent=The minor (2nd) component of plug-in version identifier, \"{0}\", must be numeric.
parse.numericServiceComponent=The service (3rd) component of plug-in version identifier, \"{0}\", must be numeric.
parse.badPrereqOnFrag=Fragment \"{0}\" requires non-existent plug-in \"{1}\".  Fragment ignored.
parse.duplicateFragment=Duplicate fragment found with id \"{0}\" and version \"{1}\".
parse.duplicateLib=Fragment \"{0}\" for plug-in \"{1}\", has added duplicate library entry \"{2}\" .

### metadata
meta.appNotInit = The application has not been initialized.
meta.authFormatChanged = The platform's authorization database file format has changed.  Cached authorization information will be lost.
meta.couldNotCreate = Error trying to create the platform metadata area: {0}.
meta.exceptionParsingLog = An exception occurred while parsing the log file: {0}
meta.failCreateLock = Unable to create platform lock file: {0}.
meta.inUse = \nThe platform metadata area is already in use by another platform instance, or there was a failure\n\
	in deleting the old lock file.  If no other platform instances are running, delete the \n\
	lock file ({0}) and try starting the platform again.
meta.notDir = Specified platform location \"{0}\" is not a directory.
meta.pluginProblems = Problems occurred when invoking code from plug-in: \"{0}\".
meta.readonly = The platform metadata area could not be written: {0}.  By default the platform writes its content\nunder the current working directory when the platform is launched.  Use the -data parameter to\nspecify a different content area for the platform.
meta.readPlatformMeta = Could not read platform metadata: {0}.
meta.registryCacheWriteProblems = Trouble writing to the registry cache file.
meta.registryCacheReadProblems = Trouble reading from the registry cache file.
meta.regCacheIOException = IOException encountered while writing \"{0}\".
meta.registryCacheEOFException = Unexpected end-of-file when reading registry cache. Defaulting to not using cached file.
meta.unableToWriteRegistry = Unable to write plug-in registry to cache.
meta.unableToCreateCache = Unable to create output stream for registry cache.
meta.unableToReadCache = Unable to create input stream for registry cache.
meta.unableToCreateRegDebug = Unable to create output stream for registry debug information in \"{0}\".
meta.unableToWriteDebugRegistry = Unable to write plug-in registry debug information to \"{0}\".
meta.unableToReadAuthorization = Unable to read authorization database: {0}.
meta.unableToWriteAuthorization = Unable to write to authorization database: {0}.
meta.writePlatformMeta = Could not write platform metadata: {0}.
meta.invalidRegDebug = Unable to create file \"{0}\" for plug-in registry debug information.
meta.infoRegDebug = Plug-in registry debug information created in file \"{0}\".
meta.unableToDeleteCache = Unable to delete registry cache file \"{0}\".
meta.writeVersion = Unable to write workspace version file: \"{0}\".
meta.versionCheckRun = Unable to run the version check application: \"{0}\".
meta.checkVersion = Exception trying to read version from file: \"{0}\".

### URL
url.badVariant=Unsupported \"platform:\" protocol variation \"{0}\".
url.resolveFragment=Unable to resolve fragment \"{0}\".
url.resolvePlugin=Unable to resolve plug-in \"{0}\".

### Preferences
preferences.errorReading=Error reading exported preferences file: {0}. {1}
preferences.errorWriting=Error writing preference file {0}. {1}
preferences.fileNotFound=Preference export file not found: {0}.
preferences.incompatible=The preference file contains preferences for version \"{0}\" of plug-in \"{1}\", but version \"{2}\" is currently installed.
preferences.invalidProperty=The preference export file contained an invalid entry: {0}={1}.
preferences.validate=Some preferences may not be compatible with the currently installed plug-ins.
